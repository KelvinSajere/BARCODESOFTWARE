/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.barcodesoftware.main;

import com.google.zxing.BinaryBitmap;
import com.google.zxing.ChecksumException;
import com.google.zxing.FormatException;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Reader;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Kelvin E Sajere
 */
public class ReadBarcode extends javax.swing.JPanel {

    private byte[] imageInByte;

    /**
     * Creates new form ReadBarcode
     */
    public ReadBarcode() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barccode = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        barccode.addChoosableFileFilter(new FileNameExtensionFilter("Barcode Images", "jpg", "png", "gif", "bmp"));
        barccode.setAcceptAllFileFilterUsed(false);

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Read Barcode", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 14), new java.awt.Color(0, 51, 204))); // NOI18N

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setText("Select and  Read Barcode");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(127, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE))
                .addContainerGap(127, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        int returnVal = barccode.showOpenDialog(null);
        //if a file was picked 
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //filter the file to be shown
            File qrCodeFile = barccode.getSelectedFile();

            ImageIcon icon = new ImageIcon(qrCodeFile.getAbsolutePath());

            //resize the image
            Image image = icon.getImage();

            Image img = image.getScaledInstance(227, 176, Image.SCALE_DEFAULT);

            ImageIcon resize = new ImageIcon(img);

            
            try {
                InputStream  barCodeInputStream = new FileInputStream(qrCodeFile);
                BufferedImage barCodeBufferedImage = ImageIO.read(barCodeInputStream);

                LuminanceSource source = new BufferedImageLuminanceSource(barCodeBufferedImage);
                BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
                Reader reader = new MultiFormatReader();
                Result result = reader.decode(bitmap);

                //System.out.println("Barcode text is " + result.getText());
                Icon iconn = new ImageIcon(getClass().getResource("/com/barcodesoftware/Images/Emoticon-Like-Liked-Support-Thumbs-icon.png"));
            JOptionPane.showMessageDialog(null, "<html>This customer has successfully won : <b>" + result.getText().toUpperCase()+"</b></html>", "Customer Status", JOptionPane.INFORMATION_MESSAGE, iconn);
            jLabel1.setIcon(resize);

            } catch (ChecksumException | FormatException | NotFoundException | IOException ex) {
                Logger.getLogger(ReadBarcode.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex);
            }

            /*
             if (qrCodeFile.isFile()) {
             jLabel1.setIcon(iccon);

             try{
             DecodeConfig decodeConfig
             = new DecodeConfig.Builder()
             .withHumanBarcodes(Boolean.TRUE)
             .build();

             Map<BarcodeEngine.DecodeResults, Object> results = BarcodeEngine.decode(qrCodeFile, decodeConfig);
             Icon iconn = new ImageIcon(getClass().getResource("/com/barcodesoftware/Images/Emoticon-Like-Liked-Support-Thumbs-icon.png"));
             String decodeText = (String) results.get(BarcodeEngine.DecodeResults.RESULT);
            Icon iconn = new ImageIcon(getClass().getResource("/com/barcodesoftware/Images/Emoticon-Like-Liked-Support-Thumbs-icon.png"));
            JOptionPane.showMessageDialog(null, "<html>This customer has successfully won : <b>" + decodeText.toUpperCase()+"</b></html>", "Customer Status", JOptionPane.INFORMATION_MESSAGE, iconn);
             }
             catch(Exception e){
             JOptionPane.showMessageDialog(null,"The Barcode could not be read ,Please ensure that "
             + "the selected image is a barcode image"+e.getLocalizedMessage(),"Error Message",JOptionPane.ERROR_MESSAGE);
             e.printStackTrace();
             }

             }*/
        }


    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser barccode;
    private javax.swing.JButton jButton2;
    public static javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
